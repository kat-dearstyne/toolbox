from typing import Dict, List, Union
from unittest import TestCase

from sklearn.metrics.pairwise import cosine_similarity

from toolbox.clustering.base.cluster_type import ClusterMapType, ClusterType
from toolbox.clustering.base.clustering_args import ClusteringArgs
from toolbox.constants.clustering_constants import DEFAULT_TESTING_CLUSTERING_METHODS
from toolbox.constants.model_constants import DEFAULT_TEST_EMBEDDING_MODEL
from toolbox.data.creators.prompt_dataset_creator import PromptDatasetCreator
from toolbox.data.creators.trace_dataset_creator import TraceDatasetCreator
from toolbox.data.objects.artifact import Artifact
from toolbox.data.readers.api_project_reader import ApiProjectReader
from toolbox.data.readers.definitions.api_definition import ApiDefinition
from toolbox.traceability.relationship_manager.embedding_types import EmbeddingType
from toolbox.traceability.relationship_manager.embeddings_manager import EmbeddingsManager


class ClusteringTestUtil:
    """
    Provides utility testing methods for clustering tests.
    """
    DEFAULT_CLUSTER_MAX_SIZE = 2
    DEFAULT_ARTIFACT_TYPE = "A"
    DEFAULT_ARTIFACTS = {
        "A": "I have a very fluffy dog.",
        "B": "My cat is a cute and a little mean.",
        "C": "My car goes very fast.",
        "D": "The road is awefully dangerous to be driving on."
    }

    @staticmethod
    def create_embeddings_manager(content_map: Dict[str, str] = None,
                                  model: str = DEFAULT_TEST_EMBEDDING_MODEL) -> EmbeddingsManager:
        """
        Create embedding manager for content in map.
        :param content_map: Maps artifact id to content.
        :param model: The model used to embed the artifacts. Default is small testing model.
        :return: The embeddings manager.
        """
        if content_map is None:
            content_map = ClusteringTestUtil.DEFAULT_ARTIFACTS
        embeddings_manager = EmbeddingsManager(content_map, model)
        return embeddings_manager

    @staticmethod
    def create_default_args(**kwargs) -> ClusteringArgs:
        """
        Creates clustering arguments with default artifacts.
        :param kwargs: Additional keyword arguments to create clustering args.
        :return:  Clustering args.
        """
        artifact_bodies = list(ClusteringTestUtil.DEFAULT_ARTIFACTS.values())
        return ClusteringTestUtil.create_clustering_args(artifact_bodies, **kwargs)

    @staticmethod
    def create_clustering_args(artifact_bodies: List[str], artifact_type: str = DEFAULT_ARTIFACT_TYPE,
                               embedding_model=DEFAULT_TEST_EMBEDDING_MODEL, **kwargs) -> ClusteringArgs:
        """
        Creates a prompt dataset containing artifacts with bodies given.
        :param artifact_bodies: The bodies of the artifacts.
        :param artifact_type: The artifact type of the artifacts.
        :param embedding_model: The model to use to embed the artifacts.
        :return: Prompt dataset creator.
        """
        artifacts = [Artifact(id=f"{artifact_type}{i + 1}", content=c, layer_id=artifact_type) for i, c in enumerate(artifact_bodies)]
        api_definition = ApiDefinition(artifacts=artifacts)
        api_dataset_reader = ApiProjectReader(api_definition)
        trace_dataset_creator = TraceDatasetCreator(api_dataset_reader)
        prompt_dataset_creator = PromptDatasetCreator(trace_dataset_creator=trace_dataset_creator)

        args = ClusteringArgs(dataset_creator=prompt_dataset_creator, embedding_model=embedding_model,
                              cluster_max_size=ClusteringTestUtil.DEFAULT_CLUSTER_MAX_SIZE,
                              cluster_methods=DEFAULT_TESTING_CLUSTERING_METHODS, **kwargs)
        return args

    @staticmethod
    def assert_embeddings_equals(artifact_text: str, embedding: EmbeddingType, model_name: str = DEFAULT_TEST_EMBEDDING_MODEL,
                                 threshold=0.95):
        """
        Asserts that embedding is sufficiently similar to the embeddings resulting from the model.
        :param artifact_text: The artifact text whose embedding is compared.
        :param embedding: The embedding to compare to that generated by the model.
        :param model_name: The name of the model to embed the text with.
        :param threshold: The similarity threshold to assume sufficiently close embeddings.
        :return: None
        """
        model = EmbeddingsManager({}, model_name).get_model()
        expected_embedding = model.encode(artifact_text)
        similarity_score = cosine_similarity([embedding], [expected_embedding])[0][0]
        assert similarity_score > threshold, f"Embeddings are not equal ({similarity_score})."

    @staticmethod
    def assert_contains_clusters(cluster_map: ClusterMapType, clusters: List[ClusterType]):
        """
        Verifies that each cluster is present in the map.
        :param cluster_map: Map of cluster IDs to clusters.
        :param clusters: The expected clusters.
        :return: None
        """
        for cluster in clusters:
            ClusteringTestUtil.assert_contains_cluster(cluster_map, cluster)

    @staticmethod
    def assert_contains_cluster(cluster_map: ClusterMapType, cluster: ClusterType):
        """
        Checks that cluster is present in cluster map.
        :param cluster_map: Map of cluster IDs to cluster.
        :param cluster: The expected cluster in map.
        :return: Whether cluster is present in map.
        """
        for s_cluster in cluster_map.values():
            if ClusteringTestUtil.are_clusters_equal(cluster, s_cluster):
                return True
        return False

    @staticmethod
    def are_clusters_equal(c1: ClusterType, c2: ClusterType):
        """
        Compares the two sets for equality.
        :param c1: One of the clusters to compare.
        :param c2: One of the clusters to compare.
        :return: Whether clusters have exactly the same elements.
        """
        c1_set = set(c1)
        c2_set = set(c2)

        c_intersection = c1_set.intersection(c2_set)
        return len(c_intersection) == len(c1) == len(c2)

    @staticmethod
    def verify_clusters(test: TestCase, clusters: ClusterMapType, expected_children: Union[List[List[str]], dict]):
        """
        Verifies that the clusters match those given.
        :param test: The test used to make the verifications.
        :param clusters: The clusters to verify.
        :param expected_children: The ground truth clusters.
        :return: None
        """
        if isinstance(expected_children, list):
            expected_children = {i: c for i, c in enumerate(expected_children)}
        for resulting_cluster, expected_cluster in zip(clusters.values(), expected_children.values()):
            test.assertEqual(len(expected_cluster), len(resulting_cluster))
            for c in expected_cluster:
                test.assertIn(c, resulting_cluster)
